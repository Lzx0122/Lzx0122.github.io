import{_ as t}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as e,o as p,c as o,a as n,b as a,e as c,f as u}from"./app-sDmYHnVy.js";const l={},i=n("h1",{id:"_1-two-sum",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-two-sum","aria-hidden":"true"},"#"),a(" 1. Two Sum")],-1),r={id:"題目-連結",tabindex:"-1"},k=n("a",{class:"header-anchor",href:"#題目-連結","aria-hidden":"true"},"#",-1),d={href:"https://leetcode.com/problems/two-sum/",target:"_blank",rel:"noopener noreferrer"},m=u(`<blockquote><p>Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target. You may assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order.</p></blockquote><h3 id="翻譯" tabindex="-1"><a class="header-anchor" href="#翻譯" aria-hidden="true">#</a> 翻譯</h3><blockquote><p>給定一個整數數組 nums 和一個整數 target ，傳回兩個數字的索引，使它們相加為 target 。 您可以假設每個輸入都有一個解決方案，並且您不能兩次使用相同的元素。 您可以按任意順序返回答案。</p></blockquote><h3 id="測試資料" tabindex="-1"><a class="header-anchor" href="#測試資料" aria-hidden="true">#</a> 測試資料</h3><blockquote><p>Example 1: 範例 1：</p></blockquote><blockquote><p>Input: nums = [2,7,11,15], target = 9 Output: [0,1] Explanation: 解釋: Because nums[0] + nums[1] == 9, we return [0, 1].</p></blockquote><blockquote><p>Example 2: 範例 2：</p></blockquote><blockquote><p>Input: nums = [3,2,4], target = 6</p></blockquote><blockquote><p>Output: [1,2]</p></blockquote><blockquote><p>Example 3: 範例 3：</p></blockquote><blockquote><p>Input: nums = [3,3], target = 6</p></blockquote><blockquote><p>Output: [0,1]</p></blockquote><h3 id="解題思路" tabindex="-1"><a class="header-anchor" href="#解題思路" aria-hidden="true">#</a> 解題思路</h3><blockquote><p>這題簡單是簡單 但一個元素一個一個匹配會需要兩個迴圈 會需要 O(n^2)時間複雜度 希望這題可以降到 O(n)</p></blockquote><blockquote><p>將元素數值當作 key 索引當作 value 製作一個 map，然後將 target - 目前的數值 得出的數值就可以在 map 裡搜尋 key</p></blockquote><h3 id="程式碼" tabindex="-1"><a class="header-anchor" href="#程式碼" aria-hidden="true">#</a> 程式碼</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">nums</span>
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">target</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">twoSum</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> temp <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token operator">&amp;&amp;</span> temp <span class="token operator">!=</span> i<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">[</span>i<span class="token punctuation">,</span> temp<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">//nums = [2,7,11,15], target = 9</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">twoSum</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,17);function b(h,v){const s=e("ExternalLinkIcon");return p(),o("div",null,[i,n("h3",r,[k,a(" 題目 "),n("a",d,[a("連結"),c(s)])]),m])}const w=t(l,[["render",b],["__file","1.html.vue"]]);export{w as default};
